#include "Emulation.hpp"

void clearScreen() {
    std::cout << "\033[2J\033[H";
}

void timer(int duration) {
    while (duration > 0) {
        int minutes = duration / 60;
        int seconds = duration % 60;
        clearScreen();
        opening();
        // std::cout << "\033[0mStock Market is open for: " << minutes << " minutes " << seconds << " seconds" << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(1));
        --duration;
    }
    clearScreen();
    closing();
}

void opening() {
	std::cout << "\x1B[8;33;120t " << "\033[1;32m" R"(
        ███████ ████████  ██████   ██████ ██   ██     ███    ███  █████  ██████  ██   ██ ███████ ████████ 
        ██         ██    ██    ██ ██      ██  ██      ████  ████ ██   ██ ██   ██ ██  ██  ██         ██    
        ███████    ██    ██    ██ ██      █████       ██ ████ ██ ███████ ██████  █████   █████      ██    
             ██    ██    ██    ██ ██      ██  ██      ██  ██  ██ ██   ██ ██   ██ ██  ██  ██         ██    
        ███████    ██     ██████   ██████ ██   ██     ██      ██ ██   ██ ██   ██ ██   ██ ███████    ██    
                                                                                                          
                                                                                                          
        ██ ███████            ██████  ██████  ███████ ███    ██                                                 
        ██ ██                ██    ██ ██   ██ ██      ████   ██                                                 
        ██ ███████           ██    ██ ██████  █████   ██ ██  ██                                                 
        ██      ██           ██    ██ ██      ██      ██  ██ ██                                                 
        ██ ███████            ██████  ██      ███████ ██   ████                                                 
                                               
        )" << std::endl;
	
}

void closing() {
	std::cout << "\x1B[8;33;120t " << "\033[1;31m" R"(

        ███████ ████████  ██████   ██████ ██   ██     ███    ███  █████  ██████  ██   ██ ███████ ████████ 
        ██         ██    ██    ██ ██      ██  ██      ████  ████ ██   ██ ██   ██ ██  ██  ██         ██    
        ███████    ██    ██    ██ ██      █████       ██ ████ ██ ███████ ██████  █████   █████      ██    
             ██    ██    ██    ██ ██      ██  ██      ██  ██  ██ ██   ██ ██   ██ ██  ██  ██         ██    
        ███████    ██     ██████   ██████ ██   ██     ██      ██ ██   ██ ██   ██ ██   ██ ███████    ██    
                                                                                                        
                                                                                                        
        ██ ███████      ██████ ██       ██████  ███████ ███████ ██████                                    
        ██ ██          ██      ██      ██    ██ ██      ██      ██   ██                                   
        ██ ███████     ██      ██      ██    ██ ███████ █████   ██   ██                                   
        ██      ██     ██      ██      ██    ██      ██ ██      ██   ██                                   
        ██ ███████      ██████ ███████  ██████  ███████ ███████ ██████                                    
                                                                      
        )" << std::endl;

}